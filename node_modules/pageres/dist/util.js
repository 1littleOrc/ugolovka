'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.save = exports.viewport = exports.resolution = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

/**
 * Fetch ten most popular resolutions
 *
 * @param {String} url
 * @param {Object} options
 * @api private
 */

let resolution = exports.resolution = (() => {
	var _ref = (0, _asyncToGenerator3.default)(function* (url, options) {
		for (const item of yield getResMem()) {
			this.sizes.push(item.item);
			this.items.push(this.create(url, item.item, options));
		}
	});

	return function resolution(_x, _x2) {
		return _ref.apply(this, arguments);
	};
})();

/**
 * Fetch keywords
 *
 * @param {Object} obj
 * @param {Object} options
 */

let viewport = exports.viewport = (() => {
	var _ref2 = (0, _asyncToGenerator3.default)(function* (obj, options) {
		for (const item of yield viewportListMem(obj.keywords)) {
			this.sizes.push(item.size);
			obj.sizes.push(item.size);
		}

		for (const size of (0, _arrayUniq2.default)(obj.sizes)) {
			this.items.push(this.create(obj.url, size, options));
		}
	});

	return function viewport(_x3, _x4) {
		return _ref2.apply(this, arguments);
	};
})();

/**
 * Save an array of streams to files
 *
 * @param {Array} streams
 * @api private
 */

let save = exports.save = (() => {
	var _ref3 = (0, _asyncToGenerator3.default)(function* (streams) {
		var _this = this;

		let end = (() => {
			var _ref4 = (0, _asyncToGenerator3.default)(function* () {
				return yield _promise2.default.all(files.map(function (file) {
					return (0, _pify2.default)(_rimraf2.default)(file);
				}));
			});

			return function end() {
				return _ref4.apply(this, arguments);
			};
		})();

		const files = [];

		if (!listener) {
			listener = process.on('SIGINT', (0, _asyncToGenerator3.default)(function* () {
				process.exit((yield end())); // eslint-disable-line xo/no-process-exit
			}));
		}

		return yield _promise2.default.all(streams.map(function (stream) {
			return new _promise2.default((() => {
				var _ref6 = (0, _asyncToGenerator3.default)(function* (resolve, reject) {
					yield (0, _pify2.default)(_mkdirp2.default)(_this.dest());

					const dest = _path2.default.join(_this.dest(), stream.filename);
					const write = (0, _fsWriteStreamAtomic2.default)(dest);

					files.push(write.__atomicTmp);

					stream.on('warning', _this.emit.bind(_this, 'warning'));
					stream.on('warn', _this.emit.bind(_this, 'warn'));
					stream.on('error', function (err) {
						return end().then(reject(err));
					});

					write.on('finish', resolve);
					write.on('error', function (err) {
						return end().then(reject(err));
					});

					stream.pipe(write);
				});

				return function (_x6, _x7) {
					return _ref6.apply(this, arguments);
				};
			})());
		}));
	});

	return function save(_x5) {
		return _ref3.apply(this, arguments);
	};
})();

/**
 * Create a pageres stream
 *
 * @param {String} uri
 * @param {String} size
 * @param {Object} options
 * @api private
 */

exports.create = create;
exports.successMessage = successMessage;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _easydate = require('easydate');

var _easydate2 = _interopRequireDefault(_easydate);

var _fsWriteStreamAtomic = require('fs-write-stream-atomic');

var _fsWriteStreamAtomic2 = _interopRequireDefault(_fsWriteStreamAtomic);

var _getRes = require('get-res');

var _getRes2 = _interopRequireDefault(_getRes);

var _logSymbols = require('log-symbols');

var _logSymbols2 = _interopRequireDefault(_logSymbols);

var _mem = require('mem');

var _mem2 = _interopRequireDefault(_mem);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _rimraf = require('rimraf');

var _rimraf2 = _interopRequireDefault(_rimraf);

var _screenshotStream = require('screenshot-stream');

var _screenshotStream2 = _interopRequireDefault(_screenshotStream);

var _viewportList = require('viewport-list');

var _viewportList2 = _interopRequireDefault(_viewportList);

var _protocolify = require('protocolify');

var _protocolify2 = _interopRequireDefault(_protocolify);

var _arrayUniq = require('array-uniq');

var _arrayUniq2 = _interopRequireDefault(_arrayUniq);

var _filenamifyUrl = require('filenamify-url');

var _filenamifyUrl2 = _interopRequireDefault(_filenamifyUrl);

var _lodash = require('lodash.template');

var _lodash2 = _interopRequireDefault(_lodash);

var _pify = require('pify');

var _pify2 = _interopRequireDefault(_pify);

var _plur = require('plur');

var _plur2 = _interopRequireDefault(_plur);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getResMem = (0, _mem2.default)(_getRes2.default);
const viewportListMem = (0, _mem2.default)(_viewportList2.default);

let listener;function create(uri, size, options) {
	const sizes = size.split('x');
	const stream = (0, _screenshotStream2.default)((0, _protocolify2.default)(uri), size, options);
	const filename = (0, _lodash2.default)(`${ options.filename }.${ options.format }`);

	if (_path2.default.isAbsolute(uri)) {
		uri = _path2.default.basename(uri);
	}

	stream.filename = filename({
		crop: options.crop ? '-cropped' : '',
		date: (0, _easydate2.default)('Y-M-d'),
		time: (0, _easydate2.default)('h-m-s'),
		size: size,
		width: sizes[0],
		height: sizes[1],
		url: (0, _filenamifyUrl2.default)(uri)
	});

	return stream;
}

/**
 * Success message
 *
 * @api private
 */

function successMessage() {
	const stats = this.stats;
	const screenshots = stats.screenshots;
	const sizes = stats.sizes;
	const urls = stats.urls;

	const words = {
		screenshots: (0, _plur2.default)('screenshot', screenshots),
		sizes: (0, _plur2.default)('size', sizes),
		urls: (0, _plur2.default)('url', urls)
	};

	console.log(`\n${ _logSymbols2.default.success } Generated ${ screenshots } ${ words.screenshots } from ${ urls } ${ words.urls } and ${ sizes } ${ words.sizes }`);
}
//# sourceMappingURL=data:application/json;base64,