'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _events = require('events');

var _arrayUniq = require('array-uniq');

var _arrayUniq2 = _interopRequireDefault(_arrayUniq);

var _arrayDiffer = require('array-differ');

var _arrayDiffer2 = _interopRequireDefault(_arrayDiffer);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Pageres {
	/**
  * Initialize a new Pageres
  *
  * @param {Object} options
  * @api public
  */

	constructor(options) {
		this.options = (0, _objectAssign2.default)({}, options);
		this.options.filename = this.options.filename || '<%= url %>-<%= size %><%= crop %>';
		this.options.format = this.options.format || 'png';

		this.stats = {};
		this.items = [];
		this.sizes = [];
		this.urls = [];
	}

	/**
  * Get or set page to capture
  *
  * @param {String} url
  * @param {Array} sizes
  * @param {Object} options
  * @api public
  */

	src(url, sizes, options) {
		if (!arguments.length) {
			return this._src;
		}

		this._src = this._src || [];
		this._src.push({ url: url, sizes: sizes, options: options });

		return this;
	}

	/**
  * Get or set the destination directory
  *
  * @param {String} dir
  * @api public
  */

	dest(dir) {
		if (!arguments.length) {
			return this._dest;
		}

		this._dest = dir;
		return this;
	}

	/**
  * Run pageres
  *
  * @api public
  */

	run() {
		var _this = this;

		return (0, _asyncToGenerator3.default)(function* () {
			yield _promise2.default.all(_this.src().map(function (src) {
				const options = (0, _objectAssign2.default)({}, _this.options, src.options);
				const sizes = (0, _arrayUniq2.default)(src.sizes.filter(/./.test, /^\d{2,4}x\d{2,4}$/i));
				const keywords = (0, _arrayDiffer2.default)(src.sizes, sizes);

				if (!src.url) {
					throw new Error('URL required');
				}

				_this.urls.push(src.url);

				if (!sizes.length && keywords.indexOf('w3counter') !== -1) {
					return _this.resolution(src.url, options);
				}

				if (keywords.length) {
					return _this.viewport({ url: src.url, sizes: sizes, keywords: keywords }, options);
				}

				for (const size of sizes) {
					_this.sizes.push(size);
					_this.items.push(_this.create(src.url, size, options));
				}
			}));

			_this.stats.urls = (0, _arrayUniq2.default)(_this.urls).length;
			_this.stats.sizes = (0, _arrayUniq2.default)(_this.sizes).length;
			_this.stats.screenshots = _this.items.length;

			if (!_this.dest()) {
				return _this.items;
			}

			yield _this.save(_this.items);

			return _this.items;
		})();
	}
}

exports.default = Pageres;
(0, _objectAssign2.default)(Pageres.prototype, _events.EventEmitter.prototype);
(0, _objectAssign2.default)(Pageres.prototype, require('./util'));
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi9pbmRleC5qcyJdLCJuYW1lcyI6WyJQYWdlcmVzIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiZmlsZW5hbWUiLCJmb3JtYXQiLCJzdGF0cyIsIml0ZW1zIiwic2l6ZXMiLCJ1cmxzIiwic3JjIiwidXJsIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiX3NyYyIsInB1c2giLCJkZXN0IiwiZGlyIiwiX2Rlc3QiLCJydW4iLCJhbGwiLCJtYXAiLCJmaWx0ZXIiLCJ0ZXN0Iiwia2V5d29yZHMiLCJFcnJvciIsImluZGV4T2YiLCJyZXNvbHV0aW9uIiwidmlld3BvcnQiLCJzaXplIiwiY3JlYXRlIiwic2NyZWVuc2hvdHMiLCJzYXZlIiwicHJvdG90eXBlIiwicmVxdWlyZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVlLE1BQU1BLE9BQU4sQ0FBYztBQUM1Qjs7Ozs7OztBQU9BQyxhQUFZQyxPQUFaLEVBQXFCO0FBQ3BCLE9BQUtBLE9BQUwsR0FBZSw0QkFBYSxFQUFiLEVBQWlCQSxPQUFqQixDQUFmO0FBQ0EsT0FBS0EsT0FBTCxDQUFhQyxRQUFiLEdBQXdCLEtBQUtELE9BQUwsQ0FBYUMsUUFBYixJQUF5QixtQ0FBakQ7QUFDQSxPQUFLRCxPQUFMLENBQWFFLE1BQWIsR0FBc0IsS0FBS0YsT0FBTCxDQUFhRSxNQUFiLElBQXVCLEtBQTdDOztBQUVBLE9BQUtDLEtBQUwsR0FBYSxFQUFiO0FBQ0EsT0FBS0MsS0FBTCxHQUFhLEVBQWI7QUFDQSxPQUFLQyxLQUFMLEdBQWEsRUFBYjtBQUNBLE9BQUtDLElBQUwsR0FBWSxFQUFaO0FBQ0E7O0FBRUQ7Ozs7Ozs7OztBQVNBQyxLQUFJQyxHQUFKLEVBQVNILEtBQVQsRUFBZ0JMLE9BQWhCLEVBQXlCO0FBQ3hCLE1BQUksQ0FBQ1MsVUFBVUMsTUFBZixFQUF1QjtBQUN0QixVQUFPLEtBQUtDLElBQVo7QUFDQTs7QUFFRCxPQUFLQSxJQUFMLEdBQVksS0FBS0EsSUFBTCxJQUFhLEVBQXpCO0FBQ0EsT0FBS0EsSUFBTCxDQUFVQyxJQUFWLENBQWUsRUFBQ0osUUFBRCxFQUFNSCxZQUFOLEVBQWFMLGdCQUFiLEVBQWY7O0FBRUEsU0FBTyxJQUFQO0FBQ0E7O0FBRUQ7Ozs7Ozs7QUFPQWEsTUFBS0MsR0FBTCxFQUFVO0FBQ1QsTUFBSSxDQUFDTCxVQUFVQyxNQUFmLEVBQXVCO0FBQ3RCLFVBQU8sS0FBS0ssS0FBWjtBQUNBOztBQUVELE9BQUtBLEtBQUwsR0FBYUQsR0FBYjtBQUNBLFNBQU8sSUFBUDtBQUNBOztBQUVEOzs7Ozs7QUFNTUUsSUFBTixHQUFZO0FBQUE7O0FBQUE7QUFDWCxTQUFNLGtCQUFRQyxHQUFSLENBQVksTUFBS1YsR0FBTCxHQUFXVyxHQUFYLENBQWUsZUFBTztBQUN2QyxVQUFNbEIsVUFBVSw0QkFBYSxFQUFiLEVBQWlCLE1BQUtBLE9BQXRCLEVBQStCTyxJQUFJUCxPQUFuQyxDQUFoQjtBQUNBLFVBQU1LLFFBQVEseUJBQVVFLElBQUlGLEtBQUosQ0FBVWMsTUFBVixDQUFpQixJQUFJQyxJQUFyQixFQUEyQixvQkFBM0IsQ0FBVixDQUFkO0FBQ0EsVUFBTUMsV0FBVywyQkFBWWQsSUFBSUYsS0FBaEIsRUFBdUJBLEtBQXZCLENBQWpCOztBQUVBLFFBQUksQ0FBQ0UsSUFBSUMsR0FBVCxFQUFjO0FBQ2IsV0FBTSxJQUFJYyxLQUFKLENBQVUsY0FBVixDQUFOO0FBQ0E7O0FBRUQsVUFBS2hCLElBQUwsQ0FBVU0sSUFBVixDQUFlTCxJQUFJQyxHQUFuQjs7QUFFQSxRQUFJLENBQUNILE1BQU1LLE1BQVAsSUFBaUJXLFNBQVNFLE9BQVQsQ0FBaUIsV0FBakIsTUFBa0MsQ0FBQyxDQUF4RCxFQUEyRDtBQUMxRCxZQUFPLE1BQUtDLFVBQUwsQ0FBZ0JqQixJQUFJQyxHQUFwQixFQUF5QlIsT0FBekIsQ0FBUDtBQUNBOztBQUVELFFBQUlxQixTQUFTWCxNQUFiLEVBQXFCO0FBQ3BCLFlBQU8sTUFBS2UsUUFBTCxDQUFjLEVBQUNqQixLQUFLRCxJQUFJQyxHQUFWLEVBQWVILFlBQWYsRUFBc0JnQixrQkFBdEIsRUFBZCxFQUErQ3JCLE9BQS9DLENBQVA7QUFDQTs7QUFFRCxTQUFLLE1BQU0wQixJQUFYLElBQW1CckIsS0FBbkIsRUFBMEI7QUFDekIsV0FBS0EsS0FBTCxDQUFXTyxJQUFYLENBQWdCYyxJQUFoQjtBQUNBLFdBQUt0QixLQUFMLENBQVdRLElBQVgsQ0FBZ0IsTUFBS2UsTUFBTCxDQUFZcEIsSUFBSUMsR0FBaEIsRUFBcUJrQixJQUFyQixFQUEyQjFCLE9BQTNCLENBQWhCO0FBQ0E7QUFDRCxJQXZCaUIsQ0FBWixDQUFOOztBQXlCQSxTQUFLRyxLQUFMLENBQVdHLElBQVgsR0FBa0IseUJBQVUsTUFBS0EsSUFBZixFQUFxQkksTUFBdkM7QUFDQSxTQUFLUCxLQUFMLENBQVdFLEtBQVgsR0FBbUIseUJBQVUsTUFBS0EsS0FBZixFQUFzQkssTUFBekM7QUFDQSxTQUFLUCxLQUFMLENBQVd5QixXQUFYLEdBQXlCLE1BQUt4QixLQUFMLENBQVdNLE1BQXBDOztBQUVBLE9BQUksQ0FBQyxNQUFLRyxJQUFMLEVBQUwsRUFBa0I7QUFDakIsV0FBTyxNQUFLVCxLQUFaO0FBQ0E7O0FBRUQsU0FBTSxNQUFLeUIsSUFBTCxDQUFVLE1BQUt6QixLQUFmLENBQU47O0FBRUEsVUFBTyxNQUFLQSxLQUFaO0FBcENXO0FBcUNYO0FBbEcyQjs7a0JBQVJOLE87QUFxR3JCLDRCQUFhQSxRQUFRZ0MsU0FBckIsRUFBZ0MscUJBQWFBLFNBQTdDO0FBQ0EsNEJBQWFoQyxRQUFRZ0MsU0FBckIsRUFBZ0NDLFFBQVEsUUFBUixDQUFoQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RXZlbnRFbWl0dGVyfSBmcm9tICdldmVudHMnO1xuaW1wb3J0IGFycmF5VW5pcSBmcm9tICdhcnJheS11bmlxJztcbmltcG9ydCBhcnJheURpZmZlciBmcm9tICdhcnJheS1kaWZmZXInO1xuaW1wb3J0IG9iamVjdEFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFnZXJlcyB7XG5cdC8qKlxuXHQgKiBJbml0aWFsaXplIGEgbmV3IFBhZ2VyZXNcblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcblx0ICogQGFwaSBwdWJsaWNcblx0ICovXG5cblx0Y29uc3RydWN0b3Iob3B0aW9ucykge1xuXHRcdHRoaXMub3B0aW9ucyA9IG9iamVjdEFzc2lnbih7fSwgb3B0aW9ucyk7XG5cdFx0dGhpcy5vcHRpb25zLmZpbGVuYW1lID0gdGhpcy5vcHRpb25zLmZpbGVuYW1lIHx8ICc8JT0gdXJsICU+LTwlPSBzaXplICU+PCU9IGNyb3AgJT4nO1xuXHRcdHRoaXMub3B0aW9ucy5mb3JtYXQgPSB0aGlzLm9wdGlvbnMuZm9ybWF0IHx8ICdwbmcnO1xuXG5cdFx0dGhpcy5zdGF0cyA9IHt9O1xuXHRcdHRoaXMuaXRlbXMgPSBbXTtcblx0XHR0aGlzLnNpemVzID0gW107XG5cdFx0dGhpcy51cmxzID0gW107XG5cdH1cblxuXHQvKipcblx0ICogR2V0IG9yIHNldCBwYWdlIHRvIGNhcHR1cmVcblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd9IHVybFxuXHQgKiBAcGFyYW0ge0FycmF5fSBzaXplc1xuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuXHQgKiBAYXBpIHB1YmxpY1xuXHQgKi9cblxuXHRzcmModXJsLCBzaXplcywgb3B0aW9ucykge1xuXHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3NyYztcblx0XHR9XG5cblx0XHR0aGlzLl9zcmMgPSB0aGlzLl9zcmMgfHwgW107XG5cdFx0dGhpcy5fc3JjLnB1c2goe3VybCwgc2l6ZXMsIG9wdGlvbnN9KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCBvciBzZXQgdGhlIGRlc3RpbmF0aW9uIGRpcmVjdG9yeVxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZGlyXG5cdCAqIEBhcGkgcHVibGljXG5cdCAqL1xuXG5cdGRlc3QoZGlyKSB7XG5cdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fZGVzdDtcblx0XHR9XG5cblx0XHR0aGlzLl9kZXN0ID0gZGlyO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJ1biBwYWdlcmVzXG5cdCAqXG5cdCAqIEBhcGkgcHVibGljXG5cdCAqL1xuXG5cdGFzeW5jIHJ1bigpIHtcblx0XHRhd2FpdCBQcm9taXNlLmFsbCh0aGlzLnNyYygpLm1hcChzcmMgPT4ge1xuXHRcdFx0Y29uc3Qgb3B0aW9ucyA9IG9iamVjdEFzc2lnbih7fSwgdGhpcy5vcHRpb25zLCBzcmMub3B0aW9ucyk7XG5cdFx0XHRjb25zdCBzaXplcyA9IGFycmF5VW5pcShzcmMuc2l6ZXMuZmlsdGVyKC8uLy50ZXN0LCAvXlxcZHsyLDR9eFxcZHsyLDR9JC9pKSk7XG5cdFx0XHRjb25zdCBrZXl3b3JkcyA9IGFycmF5RGlmZmVyKHNyYy5zaXplcywgc2l6ZXMpO1xuXG5cdFx0XHRpZiAoIXNyYy51cmwpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdVUkwgcmVxdWlyZWQnKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy51cmxzLnB1c2goc3JjLnVybCk7XG5cblx0XHRcdGlmICghc2l6ZXMubGVuZ3RoICYmIGtleXdvcmRzLmluZGV4T2YoJ3czY291bnRlcicpICE9PSAtMSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5yZXNvbHV0aW9uKHNyYy51cmwsIG9wdGlvbnMpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoa2V5d29yZHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLnZpZXdwb3J0KHt1cmw6IHNyYy51cmwsIHNpemVzLCBrZXl3b3Jkc30sIG9wdGlvbnMpO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKGNvbnN0IHNpemUgb2Ygc2l6ZXMpIHtcblx0XHRcdFx0dGhpcy5zaXplcy5wdXNoKHNpemUpO1xuXHRcdFx0XHR0aGlzLml0ZW1zLnB1c2godGhpcy5jcmVhdGUoc3JjLnVybCwgc2l6ZSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0pKTtcblxuXHRcdHRoaXMuc3RhdHMudXJscyA9IGFycmF5VW5pcSh0aGlzLnVybHMpLmxlbmd0aDtcblx0XHR0aGlzLnN0YXRzLnNpemVzID0gYXJyYXlVbmlxKHRoaXMuc2l6ZXMpLmxlbmd0aDtcblx0XHR0aGlzLnN0YXRzLnNjcmVlbnNob3RzID0gdGhpcy5pdGVtcy5sZW5ndGg7XG5cblx0XHRpZiAoIXRoaXMuZGVzdCgpKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5pdGVtcztcblx0XHR9XG5cblx0XHRhd2FpdCB0aGlzLnNhdmUodGhpcy5pdGVtcyk7XG5cblx0XHRyZXR1cm4gdGhpcy5pdGVtcztcblx0fVxufVxuXG5vYmplY3RBc3NpZ24oUGFnZXJlcy5wcm90b3R5cGUsIEV2ZW50RW1pdHRlci5wcm90b3R5cGUpO1xub2JqZWN0QXNzaWduKFBhZ2VyZXMucHJvdG90eXBlLCByZXF1aXJlKCcuL3V0aWwnKSk7XG4iXX0=